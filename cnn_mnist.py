# -*- coding: utf-8 -*-
"""cnn_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zK9ENG-eTUszweZPSL_INjYoArtg5uNP
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("/MNIST_data/", one_hot=True)

x = tf.placeholder("float", shape = [None, 784])
X = tf.reshape(x, [-1, 28, 28, 1])
y = tf.placeholder("float", [None, 10] )

def conv2d(x, W, b, strides = 1):
    x = tf.nn.conv2d(x, W, strides = [1, strides, strides, 1], padding = 'SAME')
    x = tf.nn.bias_add(x, b)
    return tf.nn.leaky_relu(x)

def maxpool2d(x, k=2):
    return tf.nn.max_pool(x, ksize = [1, k, k, 1], strides = [1, k, k, 1], padding = 'SAME')

weights = {
    'wc1': tf.get_variable('W2000', shape = (3,3,1,32), initializer = tf.contrib.layers.xavier_initializer()),
    'wc2': tf.get_variable('W2100', shape = (3,3,32,64), initializer = tf.contrib.layers.xavier_initializer()),
    'wc3': tf.get_variable('W2200', shape = (3,3,64,128), initializer = tf.contrib.layers.xavier_initializer()),
    'wd': tf.get_variable('W2300', shape = (4*4*128,128), initializer = tf.contrib.layers.xavier_initializer()),
    'out': tf.get_variable('W2600', shape = (128, 10), initializer = tf.contrib.layers.xavier_initializer())
}

bias = {
    'bc1': tf.get_variable('B4000', shape = (32), initializer = tf.contrib.layers.xavier_initializer()),
    'bc2': tf.get_variable('B4100', shape = (64), initializer = tf.contrib.layers.xavier_initializer()),
    'bc3': tf.get_variable('B5100', shape = (128), initializer = tf.contrib.layers.xavier_initializer()),
    'bd': tf.get_variable('B5300', shape = (128), initializer = tf.contrib.layers.xavier_initializer()),
    'out': tf.get_variable('B5110', shape = (10), initializer = tf.contrib.layers.xavier_initializer()),
}

def conv_net(x, weights, biases):
    conv1 = conv2d(x, weights['wc1'], bias['bc1'])
    conv1 = maxpool2d(conv1, k=2)
    print(conv1.get_shape())
    conv2 = conv2d(conv1, weights['wc2'], bias['bc2'])
    conv2 = maxpool2d(conv2, k=2)
    print(conv2.get_shape())
    conv3 = conv2d(conv2, weights['wc3'], bias['bc3'])
    conv3 = maxpool2d(conv3, k=2)
    print(conv3.get_shape())
    fc1 = tf.reshape(conv3, [-1,4*4*128])
    fc1 = tf.add(tf.matmul(fc1, weights['wd']), biases['bd'])
    fc1 = tf.nn.leaky_relu(fc1)
    
    out = tf.add(tf.matmul(fc1, weights['out']), biases['out'])
    return out

pred = conv_net(X, weights, bias)
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = pred, labels = y))
optimizer = tf.train.AdamOptimizer(0.01)
optimizer = optimizer.minimize(cost)

#Here you check whether the index of the maximum value of the predicted image is equal to the actual labelled image. and both will be a column vector.
correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))

#calculate accuracy across all the given images and average them out. 
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))

init = tf.global_variables_initializer()

num_epoch = 10
batch_size = 150
num_test_images = 10

with tf.Session() as sess:
    sess.run(init)
    for epoch in range(num_epoch):
        num_batches = mnist.train.num_examples // batch_size
        for i in range(num_batches):
            X_batch, y_batch = mnist.train.next_batch(batch_size)
            sess.run(optimizer, feed_dict={x:X_batch, y:y_batch})
            loss, acc = sess.run([cost, accuracy], feed_dict={x: X_batch,
                                                              y: y_batch})
        print("Iter " + str(epoch) + ", Loss= " + \
                      "{:.6f}".format(loss) + ", Training Accuracy= " + \
                      "{:.5f}".format(acc))
        print("Optimization Finished!")
    X_test = mnist.test.images
    y_test = mnist.test.labels
    test_acc,valid_loss = sess.run([accuracy,cost], feed_dict={x: X_test,y : y_test})
    print("Testing Accuracy:","{:.5f}".format(test_acc))

